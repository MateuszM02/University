Zadanie 1:

wersja lokalna
*:\Program Files\MongoDB\Server\7.0\bin

UWAGA - od wersji 6.0 nie ma mongo.exe, zamiast tego trzeba doinstalować mongosh.exe

mamy:
mongosh.exe -> client
mongod.exe -> mongo daemon

show dbs -> pokazuje dostępne bazy
// use test -> użyj db test (domyślna)

// help

use new -> tworzy nową bazę danych (ALE jeśli ją opuścisz bez dodania jakiejkolwiek informacji to ją automatycznie usunie)
// db.dropDatabase() -> usuwa aktualną bazę danych
show dbs
db.books.insertOne({"name":"test"}) -> wstawia wartość do kolekcji books aktualnej bazy danych (new)
// insertMany, bulkWrite służą do wstawiania wielu elementów, insert jest deprecated.
// db.authors.deleteMany({}) -> usuwa wszystkich Authorów (argumentem jest filtr, w tym wypadku taki, który zawsze jest spełniony)
show collections -> pokazuje dostępne kolekcje
// db.authors.show() -> pokazuje wszystkie elementy kolekcji authors z aktualnej bazy danych

Zadanie 2: ----------------------------------------------------------------------------------------

use task2

Ksiazka zawiera egzamplerze
Czytelnik zawiera wypozyczenia

db.books.insertMany([{
    "_id": 1,
    "ISBN": "83-246-0279-8",
    "Title": "Microsoft Access. Podręcznik administratora",
    "Author": "Helen Feddema",
    "Year": 2006,
    "Price": 69,
    "Copies": [
        {
            "Signature": "S0003",
        },
        {
            "Signature": "S0004",
        }
    ]
},
{
    "_id": 2,
    "ISBN": "83-246-0653-X",
    "Title": "SQL Server 2005. Programowanie. Od podstaw",
    "Author": "Robert Vieira",
    "Year": 2007,
    "Price": 97,
    "Copies": [
        {
            "Signature": "S0006",
        }
    ]
}])

db.readers.insertMany([{
    "_id": 1,
    "PESEL": "55101011111",
    "Lastname": "Kowalski",
    "City": "Wrocław",
    "DateOfBirth": new Date("1955-10-10"),
    "LastLoan": new Date("2020-02-01"),
    "LoansList": [
        {   
            Signature: "S0003",
            Date: new Date("2020-02-02"),
            Days: 12
        },
        {   
            Signature: "S0006",
            Date: new Date("2019-12-01"),
            Days: 24
        }
    ]
},
{
    "_id": 2,
    "PESEL": "60101033333",
    "Lastname": "Maliniak",
    "City": "Wrocław",
    "DateOfBirth": new Date("1960-10-10"),
    "LastLoan": new Date("2021-02-05"),
    "LoansList": [
        {   
            Signature: "S0003",
            Date: new Date("2021-02-05"),
            Days: 14
        },
        {   
            Signature: "S0004",
            Date: new Date("2019-12-15"),
            Days: 28
        }
    ]
}
])

db.books.find()
db.readers.find()

Zadanie 3: ----------------------------------------------------------------------------------------

db.runCommand( {
   collMod: "books",
   validator: { $jsonSchema: {
      bsonType: "object",
      required: [ "ISBN", "Title", "Author", "Year" ],
      properties: {
		 ISBN: {
			bsonType: "string",
            description: "is required and must be string"
		 },
         Title: {
            bsonType: "string",
            description: "is required and must be string"
         },
         Author: {
            bsonType: "string",
            description: "is required and must be string"
         },
         Year: {
            bsonType: "int",
			minimum: 0,
			maximum: 2100,
            description: "is required and must be INT"
         },
         Copies: {
             bsonType: ["array"],
             minItems: 0,
             uniqueItems: true,
             items: {
                bsonType: ["object"],
                required: ["Signature"],
                properties: {
					Signature: {
					bsonType: "string",
					pattern : "^S[0-9]{4,}$",
					description: "is required and must be string and match regular expression"
                    }
                }
			}
		}
	}
}}})

db.runCommand(
{
    collMod: "readers",
    validator: { $jsonSchema: {
        bsonType: "object",
        required: ["PESEL", "Lastname", "City", "DateOfBirth"],
        properties: {
            PESEL: {
                bsonType: "string",
                pattern: "^[0-9]{11}$",
				description: "is required and must be string and match regular expression"
            },
            Lastname: {
                bsonType: "string",
                description: "is required and must be string"
            },
            City: {
                bsonType: "string",
                description: "is required and must be string"
            },
            DateOfBirth: {
                bsonType: "date",
                description: "is required and must be date"
            },
            LastLoan: {
                bsonType: "date",
                description: "is not required and must be date"
            },
            LoansList:{
                bsonType: "array",
                minItems: 0,
                uniqueItems: true,
                items: {
                    bsonType: ["object"],
                    required: ["Signature", "Date", "Days"],
                    properties: {
                        Signature: {
                            bsonType: "string"
                        },
                        Date: {
                            bsonType: "date"
                        },
                        Days: {
                            bsonType: "int"
                        }
                    }
                }
            }
        }
    }}
})

db.[Collection].validate()

db.books.update(
{_id:1},
{$set: { "Copies.0.Signature": "SKKK1"}}
)

Zadanie 4 (inaczej niz wersja w C#): --------------------------------------------------------------

use task4

db.Dokumenty.insertMany([{
    "_id": 1,
    "Title": "Microsoft Access. Podręcznik administratora",
    "Copies": [
        {
            "Signature": "S0003",
        },
        {
            "Signature": "S0004",
        }
    ]
},
{
    "_id": 2,
    "Title": "SQL Server 2005. Programowanie. Od podstaw",
    "Copies": [
        {
            "Signature": "S0006",
        }
    ]
},
{
    "_id": 3,
    "Title": "T3",
    "Copies": [ {"Signature": "S0003"}, {"Signature": "S0014"}, {"Signature": "S0016"}]
},
{
    "_id": 4,
    "Title": "S4",
    "Copies": [ {"Signature": "S0023"}, {"Signature": "S0034"}, {"Signature": "S0016"}]
},
{
    "_id": 5,
    "Title": "DD5",
    "Copies": [ {"Signature": "S0404"}, {"Signature": "S0024"}, {"Signature": "S0016"}]
},
])

db.Dokumenty.find()
db.Dokumenty.find().sort("Title")
db.Dokumenty.find().sort({"Title":-1})

// pomijamy połowę (-1) i bierzemy 2 strony
db.Dokumenty.find().sort("Title").skip(db.Dokumenty.countDocuments()/2).limit(2) 
// dokumenty które zawierają egzamplerze o jednej z pierwszych pięciu sygnatur
db.Dokumenty.find({"Copies.Signature": { $regex: /^S000[0-5]/ }})    

Zadanie 5: ----------------------------------------------------------------------------------------

5 shells open:

.\mongod --dbpath D:\data\db1 --port 10000 --replSet "demo"

.\mongod --dbpath D:\data\db2 --port 20000 --replSet "demo"

.\mongod --dbpath D:\data\db3 --port 30000 --replSet "demo"

.\mongo --port 10000
var rsConfig={ _id: "demo", members: [{_id: 0, host:
'localhost:10000', priority: 10}, {_id: 1, host:
'localhost:20000'}, {_id: 2, host: 'localhost:30000',
arbiterOnly: true}]};

rsConfig
rs.initiate(rsConfig)

db.books.save({_id:1, Title:"Mistrz i Małgorzata"})
db.books.find()

.\mongo --port 20000
db.books.save({_id:2, Title:"Wyznania gejszy"})
db.books.find();
db.setSecondaryOk();
db.books.find();

kill primary
check secondary

resurrect primary:
.\mongod --dbpath D:\data\db1 --port 10000 --replSet "demo"

check again


